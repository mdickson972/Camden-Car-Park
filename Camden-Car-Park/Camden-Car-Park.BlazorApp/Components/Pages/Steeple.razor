@page "/steeple"
@using Camden_Car_Park.BlazorApp.Components.Layout
@using Camden_Car_Park.BlazorApp.Components.Modals
@using Camden_Car_Park.Common.Models.Enums
@using Camden_Car_Park.Common.Models.Models
@using Camden_Car_Park.Common.Models.ReadModels
@inject HttpClient Http

<PageTitle>Steeple</PageTitle>

<h1>Steeple Location Booking</h1>

<p>Welcome to the Steeple location booking page!</p>

<a id="new-booking-btn" type="button" class="btn btn-primary" @onclick="AddBooking">
    <i class="bi bi-plus-circle"></i> New Booking
</a>

@if (isLoading)
{
    <LoadingSpinner />
}
else
{
    <table class="table table-striped table-hover shadow-sm">
        <thead class="table-primary">
            <tr>
                <th>Employee Name</th>
                <th>Registration</th>
                <th>Make</th>
                <th>Model</th>
                <th>Colour</th>
                <th>Year</th>
                <th>Status</th>
                <th>Date Approved</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings)
            {
                <tr>
                    <td>@booking.EmployeeName</td>
                    <td>@booking.VehicleRegistrationNumber</td>
                    <td>@booking.VehicleMake</td>
                    <td>@booking.VehicleModel</td>
                    <td>@booking.VehicleColour</td>
                    <td>@booking.VehicleYear</td>
                    <td>@RenderApprovalStatus(booking.ApprovalStatus)</td>
                    <td>@booking.ApprovalDate</td>
                    <td>
                        <a id="edit-booking-btn" type="button" class="btn btn-secondary" @onclick="() => EditBooking(booking)">
                            <i class="bi bi-pencil"></i> Edit
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<BookingModal @ref="bookingModal" OnModalClosed="RefreshBookings" />

@code {
    private IEnumerable<BookingResponse> bookings = [];
    private IEnumerable<EmployeeListItem> employeesList = [];
    private bool isLoading = true;

    private BookingModal bookingModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookings();
        employeesList = await Http.GetFromJsonAsync<IEnumerable<EmployeeListItem>>("Employee/GetEmployeesList") ?? [];
        isLoading = false;
    }

    private async Task LoadBookings()
    {
        var bookingsResponse = await Http.GetFromJsonAsync<IEnumerable<BookingResponse>>("Booking/GetBookings");
        bookings = bookingsResponse ?? [];
    }

    private async Task RefreshBookings()
    {
        await LoadBookings();
        StateHasChanged();
    }

    private RenderFragment RenderApprovalStatus(ApprovalStatus status) => __builder =>
    {
        switch (status)
        {
            case ApprovalStatus.Approved:
                <span class="badge bg-success">Approved</span>
                break;
            case ApprovalStatus.Pending:
                <span class="badge bg-primary">Pending</span>
                break;
            case ApprovalStatus.Cancelled:
                <span class="badge bg-secondary">Cancelled</span>
                break;
            default:
                <span class="badge bg-secondary">Unknown</span>
                break;
        }
    };

    public void AddBooking()
    {
        bookingModal.Open(null, employeesList);
    }

    public void EditBooking(BookingResponse booking)
    {
        bookingModal.Open(booking, employeesList);
    }
}