@page "/steeple"
@using Camden_Car_Park.Common.Models.Enums
@using Camden_Car_Park.Common.Models.ReadModels
@inject HttpClient Http

<PageTitle>Steeple</PageTitle>

<h1>Steeple Location Booking</h1>

<p>Welcome to the Steeple location booking page!</p>

<table class="table table-striped table-hover shadow-sm">
    <thead class="table-primary">
        <tr>
            <th>Employee Name</th>
            <th>Registration</th>
            <th>Make</th>
            <th>Model</th>
            <th>Colour</th>
            <th>Year</th>
            <th>Status</th>
            <th>Date Approved</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var booking in bookings)
        {
            <tr>
                <td>@booking.EmployeeName</td>
                <td>@booking.VehicleRegistrationNumber</td>
                <td>@booking.VehicleMake</td>
                <td>@booking.VehicleModel</td>
                <td>@booking.VehicleColour</td>
                <td>@booking.VehicleYear</td>
                <td>@RenderApprovalStatus(booking.ApprovalStatus)</td>
                <td>@booking.ApprovalDate</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private IEnumerable<BookingResponse> bookings = [];

    protected override async Task OnInitializedAsync()
    {
        var bookingsResponse = await Http.GetFromJsonAsync<IEnumerable<BookingResponse>>("Booking/GetBookings");
        bookings = bookingsResponse ?? [];
    }

    private RenderFragment RenderApprovalStatus(ApprovalStatus status) => __builder =>
    {
        switch (status)
        {
            case ApprovalStatus.Approved:
                <span class="badge bg-success">Approved</span>
                break;
            case ApprovalStatus.Pending:
                <span class="badge bg-primary">Pending</span>
                break;
            case ApprovalStatus.Cancelled:
                <span class="badge bg-secondary">Cancelled</span>
                break;
            default:
                <span class="badge bg-secondary">Unknown</span>
                break;
        }
    };
}